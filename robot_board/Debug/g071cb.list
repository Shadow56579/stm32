
g071cb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d70  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e2c  08000e2c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e2c  08000e2c  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e2c  08000e2c  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e2c  08000e2c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e2c  08000e2c  00010e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e30  08000e30  00010e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08000e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000002c  08000e60  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  08000e60  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bf0  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000687  00000000  00000000  00021c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  000222d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000148  00000000  00000000  00022460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dfe9  00000000  00000000  000225a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001de2  00000000  00000000  00030591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f340  00000000  00000000  00032373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000816b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000478  00000000  00000000  00081708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000002c 	.word	0x2000002c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000e14 	.word	0x08000e14

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000030 	.word	0x20000030
 8000100:	08000e14 	.word	0x08000e14

08000104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000104:	b580      	push	{r7, lr}
 8000106:	b082      	sub	sp, #8
 8000108:	af00      	add	r7, sp, #0
 800010a:	0002      	movs	r2, r0
 800010c:	1dfb      	adds	r3, r7, #7
 800010e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	781b      	ldrb	r3, [r3, #0]
 8000114:	2b7f      	cmp	r3, #127	; 0x7f
 8000116:	d809      	bhi.n	800012c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000118:	1dfb      	adds	r3, r7, #7
 800011a:	781b      	ldrb	r3, [r3, #0]
 800011c:	001a      	movs	r2, r3
 800011e:	231f      	movs	r3, #31
 8000120:	401a      	ands	r2, r3
 8000122:	4b04      	ldr	r3, [pc, #16]	; (8000134 <__NVIC_EnableIRQ+0x30>)
 8000124:	2101      	movs	r1, #1
 8000126:	4091      	lsls	r1, r2
 8000128:	000a      	movs	r2, r1
 800012a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800012c:	46c0      	nop			; (mov r8, r8)
 800012e:	46bd      	mov	sp, r7
 8000130:	b002      	add	sp, #8
 8000132:	bd80      	pop	{r7, pc}
 8000134:	e000e100 	.word	0xe000e100

08000138 <device_init>:
#include <stdint.h>
#include "Init.h"
#include "stm32g071xx.h"

void device_init(nrf24l01p* nrf24l01p_instance)
{
 8000138:	b580      	push	{r7, lr}
 800013a:	b082      	sub	sp, #8
 800013c:	af00      	add	r7, sp, #0
 800013e:	6078      	str	r0, [r7, #4]
	timer1_init();
 8000140:	f000 f8ae 	bl	80002a0 <timer1_init>
	timer2_init();
 8000144:	f000 f924 	bl	8000390 <timer2_init>
	led_init();
 8000148:	f000 f86a 	bl	8000220 <led_init>
	drv_init();
 800014c:	f000 f884 	bl	8000258 <drv_init>
	spi1_init();
 8000150:	f000 f808 	bl	8000164 <spi1_init>
	nrf24_basic_init(nrf24l01p_instance);
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	0018      	movs	r0, r3
 8000158:	f000 fb3c 	bl	80007d4 <nrf24_basic_init>
}
 800015c:	46c0      	nop			; (mov r8, r8)
 800015e:	46bd      	mov	sp, r7
 8000160:	b002      	add	sp, #8
 8000162:	bd80      	pop	{r7, pc}

08000164 <spi1_init>:

void spi1_init()
{
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	//rcc
	RCC->APBENR2 |= RCC_APBENR2_SPI1EN;
 8000168:	4b29      	ldr	r3, [pc, #164]	; (8000210 <spi1_init+0xac>)
 800016a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800016c:	4b28      	ldr	r3, [pc, #160]	; (8000210 <spi1_init+0xac>)
 800016e:	2180      	movs	r1, #128	; 0x80
 8000170:	0149      	lsls	r1, r1, #5
 8000172:	430a      	orrs	r2, r1
 8000174:	641a      	str	r2, [r3, #64]	; 0x40
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN | RCC_IOPENR_GPIOBEN;
 8000176:	4b26      	ldr	r3, [pc, #152]	; (8000210 <spi1_init+0xac>)
 8000178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800017a:	4b25      	ldr	r3, [pc, #148]	; (8000210 <spi1_init+0xac>)
 800017c:	2103      	movs	r1, #3
 800017e:	430a      	orrs	r2, r1
 8000180:	635a      	str	r2, [r3, #52]	; 0x34

	//gpio
	GPIOA->MODER &= ~(GPIO_MODER_MODE5_Msk | GPIO_MODER_MODE6_Msk | GPIO_MODER_MODE7_Msk);
 8000182:	23a0      	movs	r3, #160	; 0xa0
 8000184:	05db      	lsls	r3, r3, #23
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	23a0      	movs	r3, #160	; 0xa0
 800018a:	05db      	lsls	r3, r3, #23
 800018c:	4921      	ldr	r1, [pc, #132]	; (8000214 <spi1_init+0xb0>)
 800018e:	400a      	ands	r2, r1
 8000190:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (2 << GPIO_MODER_MODE5_Pos) | (2 << GPIO_MODER_MODE6_Pos) | (2 << GPIO_MODER_MODE7_Pos);
 8000192:	23a0      	movs	r3, #160	; 0xa0
 8000194:	05db      	lsls	r3, r3, #23
 8000196:	681a      	ldr	r2, [r3, #0]
 8000198:	23a0      	movs	r3, #160	; 0xa0
 800019a:	05db      	lsls	r3, r3, #23
 800019c:	21a8      	movs	r1, #168	; 0xa8
 800019e:	0209      	lsls	r1, r1, #8
 80001a0:	430a      	orrs	r2, r1
 80001a2:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] |= (0 << GPIO_AFRL_AFSEL5_Pos) | (0 << GPIO_AFRL_AFSEL6_Pos) | (0 << GPIO_AFRL_AFSEL7_Pos);
 80001a4:	23a0      	movs	r3, #160	; 0xa0
 80001a6:	05da      	lsls	r2, r3, #23
 80001a8:	23a0      	movs	r3, #160	; 0xa0
 80001aa:	05db      	lsls	r3, r3, #23
 80001ac:	6a12      	ldr	r2, [r2, #32]
 80001ae:	621a      	str	r2, [r3, #32]
	//CE&CSN
	GPIOB->MODER &= ~(GPIO_MODER_MODE0_Msk | GPIO_MODER_MODE1_Msk);
 80001b0:	4b19      	ldr	r3, [pc, #100]	; (8000218 <spi1_init+0xb4>)
 80001b2:	681a      	ldr	r2, [r3, #0]
 80001b4:	4b18      	ldr	r3, [pc, #96]	; (8000218 <spi1_init+0xb4>)
 80001b6:	210f      	movs	r1, #15
 80001b8:	438a      	bics	r2, r1
 80001ba:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (1 << GPIO_MODER_MODE0_Pos) | (1 << GPIO_MODER_MODE1_Pos);
 80001bc:	4b16      	ldr	r3, [pc, #88]	; (8000218 <spi1_init+0xb4>)
 80001be:	681a      	ldr	r2, [r3, #0]
 80001c0:	4b15      	ldr	r3, [pc, #84]	; (8000218 <spi1_init+0xb4>)
 80001c2:	2105      	movs	r1, #5
 80001c4:	430a      	orrs	r2, r1
 80001c6:	601a      	str	r2, [r3, #0]

	//spi1
	SPI1->CR1 |= (0 << SPI_CR1_CPHA_Pos) | (0 << SPI_CR1_CPOL_Pos) | SPI_CR1_MSTR | (0 << SPI_CR1_BR_Pos)
 80001c8:	4b14      	ldr	r3, [pc, #80]	; (800021c <spi1_init+0xb8>)
 80001ca:	681a      	ldr	r2, [r3, #0]
 80001cc:	4b13      	ldr	r3, [pc, #76]	; (800021c <spi1_init+0xb8>)
 80001ce:	2181      	movs	r1, #129	; 0x81
 80001d0:	0089      	lsls	r1, r1, #2
 80001d2:	430a      	orrs	r2, r1
 80001d4:	601a      	str	r2, [r3, #0]
			  | (0 << SPI_CR1_BIDIMODE_Pos) | SPI_CR1_SSM;
	SPI1->CR1  &= ~SPI_CR1_LSBFIRST;
 80001d6:	4b11      	ldr	r3, [pc, #68]	; (800021c <spi1_init+0xb8>)
 80001d8:	681a      	ldr	r2, [r3, #0]
 80001da:	4b10      	ldr	r3, [pc, #64]	; (800021c <spi1_init+0xb8>)
 80001dc:	2180      	movs	r1, #128	; 0x80
 80001de:	438a      	bics	r2, r1
 80001e0:	601a      	str	r2, [r3, #0]
	SPI1->CR2 |= (0b111 << SPI_CR2_DS_Pos) | SPI_CR2_FRXTH;
 80001e2:	4b0e      	ldr	r3, [pc, #56]	; (800021c <spi1_init+0xb8>)
 80001e4:	685a      	ldr	r2, [r3, #4]
 80001e6:	4b0d      	ldr	r3, [pc, #52]	; (800021c <spi1_init+0xb8>)
 80001e8:	21b8      	movs	r1, #184	; 0xb8
 80001ea:	0149      	lsls	r1, r1, #5
 80001ec:	430a      	orrs	r2, r1
 80001ee:	605a      	str	r2, [r3, #4]
	SPI1->CR1 |= SPI_CR1_SSI;
 80001f0:	4b0a      	ldr	r3, [pc, #40]	; (800021c <spi1_init+0xb8>)
 80001f2:	681a      	ldr	r2, [r3, #0]
 80001f4:	4b09      	ldr	r3, [pc, #36]	; (800021c <spi1_init+0xb8>)
 80001f6:	2180      	movs	r1, #128	; 0x80
 80001f8:	0049      	lsls	r1, r1, #1
 80001fa:	430a      	orrs	r2, r1
 80001fc:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= SPI_CR1_SPE;
 80001fe:	4b07      	ldr	r3, [pc, #28]	; (800021c <spi1_init+0xb8>)
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	4b06      	ldr	r3, [pc, #24]	; (800021c <spi1_init+0xb8>)
 8000204:	2140      	movs	r1, #64	; 0x40
 8000206:	430a      	orrs	r2, r1
 8000208:	601a      	str	r2, [r3, #0]
}
 800020a:	46c0      	nop			; (mov r8, r8)
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	40021000 	.word	0x40021000
 8000214:	ffff03ff 	.word	0xffff03ff
 8000218:	50000400 	.word	0x50000400
 800021c:	40013000 	.word	0x40013000

08000220 <led_init>:

void led_init()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	//rcc
	RCC->IOPENR |= RCC_IOPENR_GPIODEN;
 8000224:	4b0a      	ldr	r3, [pc, #40]	; (8000250 <led_init+0x30>)
 8000226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <led_init+0x30>)
 800022a:	2108      	movs	r1, #8
 800022c:	430a      	orrs	r2, r1
 800022e:	635a      	str	r2, [r3, #52]	; 0x34

	//led
	GPIOD->MODER &= ~(GPIO_MODER_MODE0_Msk | GPIO_MODER_MODE1_Msk | GPIO_MODER_MODE2_Msk | GPIO_MODER_MODE3_Msk);
 8000230:	4b08      	ldr	r3, [pc, #32]	; (8000254 <led_init+0x34>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b07      	ldr	r3, [pc, #28]	; (8000254 <led_init+0x34>)
 8000236:	21ff      	movs	r1, #255	; 0xff
 8000238:	438a      	bics	r2, r1
 800023a:	601a      	str	r2, [r3, #0]
	GPIOD->MODER |= (1 << GPIO_MODER_MODE0_Pos) | (1 << GPIO_MODER_MODE1_Pos) | (1 << GPIO_MODER_MODE2_Pos) | (1 << GPIO_MODER_MODE3_Pos);
 800023c:	4b05      	ldr	r3, [pc, #20]	; (8000254 <led_init+0x34>)
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <led_init+0x34>)
 8000242:	2155      	movs	r1, #85	; 0x55
 8000244:	430a      	orrs	r2, r1
 8000246:	601a      	str	r2, [r3, #0]
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	40021000 	.word	0x40021000
 8000254:	50000c00 	.word	0x50000c00

08000258 <drv_init>:

void drv_init()
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	//rcc
	RCC->IOPENR |= RCC_IOPENR_GPIOCEN;
 800025c:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <drv_init+0x3c>)
 800025e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000260:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <drv_init+0x3c>)
 8000262:	2104      	movs	r1, #4
 8000264:	430a      	orrs	r2, r1
 8000266:	635a      	str	r2, [r3, #52]	; 0x34

	//nSLEEP DRV8848
	GPIOC->MODER &= ~(GPIO_MODER_MODE6_Msk);
 8000268:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <drv_init+0x40>)
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <drv_init+0x40>)
 800026e:	490b      	ldr	r1, [pc, #44]	; (800029c <drv_init+0x44>)
 8000270:	400a      	ands	r2, r1
 8000272:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (1 << GPIO_MODER_MODE6_Pos);
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <drv_init+0x40>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	4b07      	ldr	r3, [pc, #28]	; (8000298 <drv_init+0x40>)
 800027a:	2180      	movs	r1, #128	; 0x80
 800027c:	0149      	lsls	r1, r1, #5
 800027e:	430a      	orrs	r2, r1
 8000280:	601a      	str	r2, [r3, #0]
	GPIOC->ODR |= GPIO_ODR_OD6;
 8000282:	4b05      	ldr	r3, [pc, #20]	; (8000298 <drv_init+0x40>)
 8000284:	695a      	ldr	r2, [r3, #20]
 8000286:	4b04      	ldr	r3, [pc, #16]	; (8000298 <drv_init+0x40>)
 8000288:	2140      	movs	r1, #64	; 0x40
 800028a:	430a      	orrs	r2, r1
 800028c:	615a      	str	r2, [r3, #20]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40021000 	.word	0x40021000
 8000298:	50000800 	.word	0x50000800
 800029c:	ffffcfff 	.word	0xffffcfff

080002a0 <timer1_init>:

void timer1_init()
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	//rcc
	RCC->APBENR2 |= RCC_APBENR2_TIM1EN;
 80002a4:	4b33      	ldr	r3, [pc, #204]	; (8000374 <timer1_init+0xd4>)
 80002a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002a8:	4b32      	ldr	r3, [pc, #200]	; (8000374 <timer1_init+0xd4>)
 80002aa:	2180      	movs	r1, #128	; 0x80
 80002ac:	0109      	lsls	r1, r1, #4
 80002ae:	430a      	orrs	r2, r1
 80002b0:	641a      	str	r2, [r3, #64]	; 0x40
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 80002b2:	4b30      	ldr	r3, [pc, #192]	; (8000374 <timer1_init+0xd4>)
 80002b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80002b6:	4b2f      	ldr	r3, [pc, #188]	; (8000374 <timer1_init+0xd4>)
 80002b8:	2101      	movs	r1, #1
 80002ba:	430a      	orrs	r2, r1
 80002bc:	635a      	str	r2, [r3, #52]	; 0x34

	//gpio GPIOA(8-11) - PWM
	GPIOA->MODER &= ~(GPIO_MODER_MODE8_Msk | GPIO_MODER_MODE9_Msk | GPIO_MODER_MODE10_Msk | GPIO_MODER_MODE11_Msk);
 80002be:	23a0      	movs	r3, #160	; 0xa0
 80002c0:	05db      	lsls	r3, r3, #23
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	23a0      	movs	r3, #160	; 0xa0
 80002c6:	05db      	lsls	r3, r3, #23
 80002c8:	492b      	ldr	r1, [pc, #172]	; (8000378 <timer1_init+0xd8>)
 80002ca:	400a      	ands	r2, r1
 80002cc:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (2 << GPIO_MODER_MODE8_Pos) | (2 << GPIO_MODER_MODE9_Pos) | (2 << GPIO_MODER_MODE10_Pos) | (2 << GPIO_MODER_MODE11_Pos);
 80002ce:	23a0      	movs	r3, #160	; 0xa0
 80002d0:	05db      	lsls	r3, r3, #23
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	23a0      	movs	r3, #160	; 0xa0
 80002d6:	05db      	lsls	r3, r3, #23
 80002d8:	21aa      	movs	r1, #170	; 0xaa
 80002da:	0409      	lsls	r1, r1, #16
 80002dc:	430a      	orrs	r2, r1
 80002de:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[1] |= (2 << GPIO_AFRH_AFSEL8_Pos) | (2 << GPIO_AFRH_AFSEL9_Pos) | (2 << GPIO_AFRH_AFSEL10_Pos) | (2 << GPIO_AFRH_AFSEL11_Pos);
 80002e0:	23a0      	movs	r3, #160	; 0xa0
 80002e2:	05db      	lsls	r3, r3, #23
 80002e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002e6:	23a0      	movs	r3, #160	; 0xa0
 80002e8:	05db      	lsls	r3, r3, #23
 80002ea:	4924      	ldr	r1, [pc, #144]	; (800037c <timer1_init+0xdc>)
 80002ec:	430a      	orrs	r2, r1
 80002ee:	625a      	str	r2, [r3, #36]	; 0x24

	//tim1
	TIM1->PSC = 0;
 80002f0:	4b23      	ldr	r3, [pc, #140]	; (8000380 <timer1_init+0xe0>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 500;
 80002f6:	4b22      	ldr	r3, [pc, #136]	; (8000380 <timer1_init+0xe0>)
 80002f8:	22fa      	movs	r2, #250	; 0xfa
 80002fa:	0052      	lsls	r2, r2, #1
 80002fc:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR1 = 0;
 80002fe:	4b20      	ldr	r3, [pc, #128]	; (8000380 <timer1_init+0xe0>)
 8000300:	2200      	movs	r2, #0
 8000302:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8000304:	4b1e      	ldr	r3, [pc, #120]	; (8000380 <timer1_init+0xe0>)
 8000306:	2200      	movs	r2, #0
 8000308:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 800030a:	4b1d      	ldr	r3, [pc, #116]	; (8000380 <timer1_init+0xe0>)
 800030c:	2200      	movs	r2, #0
 800030e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 0;
 8000310:	4b1b      	ldr	r3, [pc, #108]	; (8000380 <timer1_init+0xe0>)
 8000312:	2200      	movs	r2, #0
 8000314:	641a      	str	r2, [r3, #64]	; 0x40
	TIM1->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E;
 8000316:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <timer1_init+0xe0>)
 8000318:	6a1a      	ldr	r2, [r3, #32]
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <timer1_init+0xe0>)
 800031c:	4919      	ldr	r1, [pc, #100]	; (8000384 <timer1_init+0xe4>)
 800031e:	430a      	orrs	r2, r1
 8000320:	621a      	str	r2, [r3, #32]
	TIM1->CR1 |= TIM_CR1_ARPE;
 8000322:	4b17      	ldr	r3, [pc, #92]	; (8000380 <timer1_init+0xe0>)
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	4b16      	ldr	r3, [pc, #88]	; (8000380 <timer1_init+0xe0>)
 8000328:	2180      	movs	r1, #128	; 0x80
 800032a:	430a      	orrs	r2, r1
 800032c:	601a      	str	r2, [r3, #0]
	TIM1->CCMR1 |= TIM_CCMR1_OC1PE | 6 << TIM_CCMR1_OC1M_Pos | TIM_CCMR1_OC2PE | 6 << TIM_CCMR1_OC2M_Pos;
 800032e:	4b14      	ldr	r3, [pc, #80]	; (8000380 <timer1_init+0xe0>)
 8000330:	699a      	ldr	r2, [r3, #24]
 8000332:	4b13      	ldr	r3, [pc, #76]	; (8000380 <timer1_init+0xe0>)
 8000334:	4914      	ldr	r1, [pc, #80]	; (8000388 <timer1_init+0xe8>)
 8000336:	430a      	orrs	r2, r1
 8000338:	619a      	str	r2, [r3, #24]
	TIM1->CCMR2	|= TIM_CCMR2_OC3PE | 6 << TIM_CCMR2_OC3M_Pos | TIM_CCMR2_OC4PE | 6 << TIM_CCMR2_OC4M_Pos;
 800033a:	4b11      	ldr	r3, [pc, #68]	; (8000380 <timer1_init+0xe0>)
 800033c:	69da      	ldr	r2, [r3, #28]
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <timer1_init+0xe0>)
 8000340:	4911      	ldr	r1, [pc, #68]	; (8000388 <timer1_init+0xe8>)
 8000342:	430a      	orrs	r2, r1
 8000344:	61da      	str	r2, [r3, #28]
	TIM1->CCER |= TIM_CCER_CC1P | TIM_CCER_CC1NP | TIM_CCER_CC2P | TIM_CCER_CC3P | TIM_CCER_CC4P;
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <timer1_init+0xe0>)
 8000348:	6a1a      	ldr	r2, [r3, #32]
 800034a:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <timer1_init+0xe0>)
 800034c:	490f      	ldr	r1, [pc, #60]	; (800038c <timer1_init+0xec>)
 800034e:	430a      	orrs	r2, r1
 8000350:	621a      	str	r2, [r3, #32]
	TIM1->BDTR |= TIM_BDTR_MOE;
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <timer1_init+0xe0>)
 8000354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000356:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <timer1_init+0xe0>)
 8000358:	2180      	movs	r1, #128	; 0x80
 800035a:	0209      	lsls	r1, r1, #8
 800035c:	430a      	orrs	r2, r1
 800035e:	645a      	str	r2, [r3, #68]	; 0x44
	TIM1->CR1 |= TIM_CR1_CEN;
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <timer1_init+0xe0>)
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <timer1_init+0xe0>)
 8000366:	2101      	movs	r1, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	601a      	str	r2, [r3, #0]
}
 800036c:	46c0      	nop			; (mov r8, r8)
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	40021000 	.word	0x40021000
 8000378:	ff00ffff 	.word	0xff00ffff
 800037c:	00002222 	.word	0x00002222
 8000380:	40012c00 	.word	0x40012c00
 8000384:	00001111 	.word	0x00001111
 8000388:	00006868 	.word	0x00006868
 800038c:	0000222a 	.word	0x0000222a

08000390 <timer2_init>:

void timer2_init()
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	//rcc
	RCC->APBENR1 |= RCC_APBENR1_TIM2EN;
 8000394:	4b11      	ldr	r3, [pc, #68]	; (80003dc <timer2_init+0x4c>)
 8000396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000398:	4b10      	ldr	r3, [pc, #64]	; (80003dc <timer2_init+0x4c>)
 800039a:	2101      	movs	r1, #1
 800039c:	430a      	orrs	r2, r1
 800039e:	63da      	str	r2, [r3, #60]	; 0x3c

	//tim2
	TIM2->PSC = 1599;
 80003a0:	2380      	movs	r3, #128	; 0x80
 80003a2:	05db      	lsls	r3, r3, #23
 80003a4:	4a0e      	ldr	r2, [pc, #56]	; (80003e0 <timer2_init+0x50>)
 80003a6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 4999;
 80003a8:	2380      	movs	r3, #128	; 0x80
 80003aa:	05db      	lsls	r3, r3, #23
 80003ac:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <timer2_init+0x54>)
 80003ae:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->DIER |= TIM_DIER_UIE;
 80003b0:	2380      	movs	r3, #128	; 0x80
 80003b2:	05db      	lsls	r3, r3, #23
 80003b4:	68da      	ldr	r2, [r3, #12]
 80003b6:	2380      	movs	r3, #128	; 0x80
 80003b8:	05db      	lsls	r3, r3, #23
 80003ba:	2101      	movs	r1, #1
 80003bc:	430a      	orrs	r2, r1
 80003be:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ(TIM2_IRQn);
 80003c0:	200f      	movs	r0, #15
 80003c2:	f7ff fe9f 	bl	8000104 <__NVIC_EnableIRQ>
	TIM2->CR1 |= TIM_CR1_CEN;
 80003c6:	2380      	movs	r3, #128	; 0x80
 80003c8:	05db      	lsls	r3, r3, #23
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	2380      	movs	r3, #128	; 0x80
 80003ce:	05db      	lsls	r3, r3, #23
 80003d0:	2101      	movs	r1, #1
 80003d2:	430a      	orrs	r2, r1
 80003d4:	601a      	str	r2, [r3, #0]
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40021000 	.word	0x40021000
 80003e0:	0000063f 	.word	0x0000063f
 80003e4:	00001387 	.word	0x00001387

080003e8 <delay>:
#include "implementation.h"

static void delay(uint32_t dl)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	for(int i = 0;i<dl;i++) {};
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	e002      	b.n	80003fc <delay+0x14>
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	3301      	adds	r3, #1
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	429a      	cmp	r2, r3
 8000402:	d8f8      	bhi.n	80003f6 <delay+0xe>
}
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b004      	add	sp, #16
 800040c:	bd80      	pop	{r7, pc}
	...

08000410 <spi1_write_function>:


uint8_t spi1_write_function( const uint8_t byte_to_be_sent )
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	0002      	movs	r2, r0
 8000418:	1dfb      	adds	r3, r7, #7
 800041a:	701a      	strb	r2, [r3, #0]
    // Wait until transmit buffer is empty
    while ( (SPI1->SR & SPI_SR_TXE) != SPI_SR_TXE ) {};
 800041c:	46c0      	nop			; (mov r8, r8)
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <spi1_write_function+0x40>)
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	2202      	movs	r2, #2
 8000424:	4013      	ands	r3, r2
 8000426:	2b02      	cmp	r3, #2
 8000428:	d1f9      	bne.n	800041e <spi1_write_function+0xe>

    // Write single byte into the Data Register with single byte access
    *((volatile uint8_t*)&SPI1->DR) = byte_to_be_sent;
 800042a:	4a0a      	ldr	r2, [pc, #40]	; (8000454 <spi1_write_function+0x44>)
 800042c:	1dfb      	adds	r3, r7, #7
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	7013      	strb	r3, [r2, #0]

    // Wait until answer will appear in RX buffer
    while ( ((SPI1->SR & SPI_SR_RXNE) != SPI_SR_RXNE) ){}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <spi1_write_function+0x40>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	2201      	movs	r2, #1
 800043a:	4013      	ands	r3, r2
 800043c:	2b01      	cmp	r3, #1
 800043e:	d1f9      	bne.n	8000434 <spi1_write_function+0x24>

    // Return value from RX buffer
    return SPI1->DR;
 8000440:	4b03      	ldr	r3, [pc, #12]	; (8000450 <spi1_write_function+0x40>)
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	b2db      	uxtb	r3, r3
}
 8000446:	0018      	movs	r0, r3
 8000448:	46bd      	mov	sp, r7
 800044a:	b002      	add	sp, #8
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	40013000 	.word	0x40013000
 8000454:	4001300c 	.word	0x4001300c

08000458 <ce_high_function>:

void ce_high_function(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	GPIOB->ODR |= GPIO_ODR_OD0;
 800045c:	4b04      	ldr	r3, [pc, #16]	; (8000470 <ce_high_function+0x18>)
 800045e:	695a      	ldr	r2, [r3, #20]
 8000460:	4b03      	ldr	r3, [pc, #12]	; (8000470 <ce_high_function+0x18>)
 8000462:	2101      	movs	r1, #1
 8000464:	430a      	orrs	r2, r1
 8000466:	615a      	str	r2, [r3, #20]
}
 8000468:	46c0      	nop			; (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	50000400 	.word	0x50000400

08000474 <ce_low_function>:

void ce_low_function(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~(GPIO_ODR_OD0);
 8000478:	4b04      	ldr	r3, [pc, #16]	; (800048c <ce_low_function+0x18>)
 800047a:	695a      	ldr	r2, [r3, #20]
 800047c:	4b03      	ldr	r3, [pc, #12]	; (800048c <ce_low_function+0x18>)
 800047e:	2101      	movs	r1, #1
 8000480:	438a      	bics	r2, r1
 8000482:	615a      	str	r2, [r3, #20]
}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	50000400 	.word	0x50000400

08000490 <csn_high_function>:

void csn_high_function(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	GPIOB->ODR |= GPIO_ODR_OD1;
 8000494:	4b04      	ldr	r3, [pc, #16]	; (80004a8 <csn_high_function+0x18>)
 8000496:	695a      	ldr	r2, [r3, #20]
 8000498:	4b03      	ldr	r3, [pc, #12]	; (80004a8 <csn_high_function+0x18>)
 800049a:	2102      	movs	r1, #2
 800049c:	430a      	orrs	r2, r1
 800049e:	615a      	str	r2, [r3, #20]
}
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	50000400 	.word	0x50000400

080004ac <csn_low_function>:

void csn_low_function(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~(GPIO_ODR_OD1);
 80004b0:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <csn_low_function+0x18>)
 80004b2:	695a      	ldr	r2, [r3, #20]
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <csn_low_function+0x18>)
 80004b6:	2102      	movs	r1, #2
 80004b8:	438a      	bics	r2, r1
 80004ba:	615a      	str	r2, [r3, #20]
}
 80004bc:	46c0      	nop			; (mov r8, r8)
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	50000400 	.word	0x50000400

080004c8 <encode_buttons>:

void encode_buttons(uint8_t radio_controller_message[6])
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]

	for(uint8_t i = 1;i<=2;i++)
 80004d0:	230f      	movs	r3, #15
 80004d2:	18fb      	adds	r3, r7, r3
 80004d4:	2201      	movs	r2, #1
 80004d6:	701a      	strb	r2, [r3, #0]
 80004d8:	e030      	b.n	800053c <encode_buttons+0x74>
	{
		uint8_t temp = radio_controller_message[1] & (1 << i-1);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	3301      	adds	r3, #1
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	b25b      	sxtb	r3, r3
 80004e2:	200f      	movs	r0, #15
 80004e4:	183a      	adds	r2, r7, r0
 80004e6:	7812      	ldrb	r2, [r2, #0]
 80004e8:	3a01      	subs	r2, #1
 80004ea:	2101      	movs	r1, #1
 80004ec:	4091      	lsls	r1, r2
 80004ee:	000a      	movs	r2, r1
 80004f0:	b252      	sxtb	r2, r2
 80004f2:	4013      	ands	r3, r2
 80004f4:	b25a      	sxtb	r2, r3
 80004f6:	210e      	movs	r1, #14
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	701a      	strb	r2, [r3, #0]
		if(temp != 0)
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d009      	beq.n	8000518 <encode_buttons+0x50>
		{
			GPIOD->ODR |= (0x1UL << i);
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <encode_buttons+0x88>)
 8000506:	6959      	ldr	r1, [r3, #20]
 8000508:	183b      	adds	r3, r7, r0
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2201      	movs	r2, #1
 800050e:	409a      	lsls	r2, r3
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <encode_buttons+0x88>)
 8000512:	430a      	orrs	r2, r1
 8000514:	615a      	str	r2, [r3, #20]
 8000516:	e00b      	b.n	8000530 <encode_buttons+0x68>
		}
		else
		{
			GPIOD->ODR &= ~(0x1UL << i);
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <encode_buttons+0x88>)
 800051a:	695a      	ldr	r2, [r3, #20]
 800051c:	230f      	movs	r3, #15
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2101      	movs	r1, #1
 8000524:	4099      	lsls	r1, r3
 8000526:	000b      	movs	r3, r1
 8000528:	43d9      	mvns	r1, r3
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <encode_buttons+0x88>)
 800052c:	400a      	ands	r2, r1
 800052e:	615a      	str	r2, [r3, #20]
	for(uint8_t i = 1;i<=2;i++)
 8000530:	210f      	movs	r1, #15
 8000532:	187b      	adds	r3, r7, r1
 8000534:	781a      	ldrb	r2, [r3, #0]
 8000536:	187b      	adds	r3, r7, r1
 8000538:	3201      	adds	r2, #1
 800053a:	701a      	strb	r2, [r3, #0]
 800053c:	230f      	movs	r3, #15
 800053e:	18fb      	adds	r3, r7, r3
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b02      	cmp	r3, #2
 8000544:	d9c9      	bls.n	80004da <encode_buttons+0x12>
		}
	}

}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	b004      	add	sp, #16
 800054e:	bd80      	pop	{r7, pc}
 8000550:	50000c00 	.word	0x50000c00

08000554 <encode_joystick>:

void encode_joystick(uint8_t right_joystick_top_bottom, uint8_t right_joystick_left_right,
					 uint8_t left_joystick_left_right, uint8_t left_joystick_top_bottom,
					 uint8_t radio_controller_message[6])
{
 8000554:	b5b0      	push	{r4, r5, r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	0005      	movs	r5, r0
 800055c:	000c      	movs	r4, r1
 800055e:	0010      	movs	r0, r2
 8000560:	0019      	movs	r1, r3
 8000562:	1dfb      	adds	r3, r7, #7
 8000564:	1c2a      	adds	r2, r5, #0
 8000566:	701a      	strb	r2, [r3, #0]
 8000568:	1dbb      	adds	r3, r7, #6
 800056a:	1c22      	adds	r2, r4, #0
 800056c:	701a      	strb	r2, [r3, #0]
 800056e:	1d7b      	adds	r3, r7, #5
 8000570:	1c02      	adds	r2, r0, #0
 8000572:	701a      	strb	r2, [r3, #0]
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	1c0a      	adds	r2, r1, #0
 8000578:	701a      	strb	r2, [r3, #0]
	uint8_t button_state = 0;
 800057a:	240f      	movs	r4, #15
 800057c:	193b      	adds	r3, r7, r4
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]

	TIM1->CCR1 = 0;
 8000582:	4b82      	ldr	r3, [pc, #520]	; (800078c <encode_joystick+0x238>)
 8000584:	2200      	movs	r2, #0
 8000586:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8000588:	4b80      	ldr	r3, [pc, #512]	; (800078c <encode_joystick+0x238>)
 800058a:	2200      	movs	r2, #0
 800058c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 800058e:	4b7f      	ldr	r3, [pc, #508]	; (800078c <encode_joystick+0x238>)
 8000590:	2200      	movs	r2, #0
 8000592:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 0;
 8000594:	4b7d      	ldr	r3, [pc, #500]	; (800078c <encode_joystick+0x238>)
 8000596:	2200      	movs	r2, #0
 8000598:	641a      	str	r2, [r3, #64]	; 0x40
	delay(1000);
 800059a:	23fa      	movs	r3, #250	; 0xfa
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	0018      	movs	r0, r3
 80005a0:	f7ff ff22 	bl	80003e8 <delay>

	if((radio_controller_message[1] & (1 << 5)) != 0)
 80005a4:	6a3b      	ldr	r3, [r7, #32]
 80005a6:	3301      	adds	r3, #1
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	001a      	movs	r2, r3
 80005ac:	2320      	movs	r3, #32
 80005ae:	4013      	ands	r3, r2
 80005b0:	d003      	beq.n	80005ba <encode_joystick+0x66>
	{
		button_state = 2;
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	2202      	movs	r2, #2
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	e00f      	b.n	80005da <encode_joystick+0x86>
	}
	else if((radio_controller_message[1] & (1 << 4)) != 0)
 80005ba:	6a3b      	ldr	r3, [r7, #32]
 80005bc:	3301      	adds	r3, #1
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	001a      	movs	r2, r3
 80005c2:	2310      	movs	r3, #16
 80005c4:	4013      	ands	r3, r2
 80005c6:	d004      	beq.n	80005d2 <encode_joystick+0x7e>
	{
		button_state = 1;
 80005c8:	230f      	movs	r3, #15
 80005ca:	18fb      	adds	r3, r7, r3
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
 80005d0:	e003      	b.n	80005da <encode_joystick+0x86>
	}
	else
	{
		button_state = 0;
 80005d2:	230f      	movs	r3, #15
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
	}

	//вперед
	if(right_joystick_top_bottom == 1 && left_joystick_left_right == 0)
 80005da:	1dfb      	adds	r3, r7, #7
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d117      	bne.n	8000612 <encode_joystick+0xbe>
 80005e2:	1d7b      	adds	r3, r7, #5
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d113      	bne.n	8000612 <encode_joystick+0xbe>
	{
		TIM1->CCR1 = 300 + 90*button_state;
 80005ea:	210f      	movs	r1, #15
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	225a      	movs	r2, #90	; 0x5a
 80005f2:	4353      	muls	r3, r2
 80005f4:	332d      	adds	r3, #45	; 0x2d
 80005f6:	33ff      	adds	r3, #255	; 0xff
 80005f8:	001a      	movs	r2, r3
 80005fa:	4b64      	ldr	r3, [pc, #400]	; (800078c <encode_joystick+0x238>)
 80005fc:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR4 = 300 + 90*button_state;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	225a      	movs	r2, #90	; 0x5a
 8000604:	4353      	muls	r3, r2
 8000606:	332d      	adds	r3, #45	; 0x2d
 8000608:	33ff      	adds	r3, #255	; 0xff
 800060a:	001a      	movs	r2, r3
 800060c:	4b5f      	ldr	r3, [pc, #380]	; (800078c <encode_joystick+0x238>)
 800060e:	641a      	str	r2, [r3, #64]	; 0x40
 8000610:	e0b7      	b.n	8000782 <encode_joystick+0x22e>
	}
	//назад
	else if(right_joystick_top_bottom == 2 && left_joystick_left_right == 0)
 8000612:	1dfb      	adds	r3, r7, #7
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b02      	cmp	r3, #2
 8000618:	d117      	bne.n	800064a <encode_joystick+0xf6>
 800061a:	1d7b      	adds	r3, r7, #5
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d113      	bne.n	800064a <encode_joystick+0xf6>
	{
		TIM1->CCR2 = 300 + 90*button_state;
 8000622:	210f      	movs	r1, #15
 8000624:	187b      	adds	r3, r7, r1
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	225a      	movs	r2, #90	; 0x5a
 800062a:	4353      	muls	r3, r2
 800062c:	332d      	adds	r3, #45	; 0x2d
 800062e:	33ff      	adds	r3, #255	; 0xff
 8000630:	001a      	movs	r2, r3
 8000632:	4b56      	ldr	r3, [pc, #344]	; (800078c <encode_joystick+0x238>)
 8000634:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 300 + 90*button_state;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	225a      	movs	r2, #90	; 0x5a
 800063c:	4353      	muls	r3, r2
 800063e:	332d      	adds	r3, #45	; 0x2d
 8000640:	33ff      	adds	r3, #255	; 0xff
 8000642:	001a      	movs	r2, r3
 8000644:	4b51      	ldr	r3, [pc, #324]	; (800078c <encode_joystick+0x238>)
 8000646:	63da      	str	r2, [r3, #60]	; 0x3c
 8000648:	e09b      	b.n	8000782 <encode_joystick+0x22e>
	}
	//вперед-направо
	else if(left_joystick_left_right == 2 && right_joystick_top_bottom == 1)
 800064a:	1d7b      	adds	r3, r7, #5
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b02      	cmp	r3, #2
 8000650:	d116      	bne.n	8000680 <encode_joystick+0x12c>
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d112      	bne.n	8000680 <encode_joystick+0x12c>
	{
		TIM1->CCR1 = 300 + 90*button_state;
 800065a:	210f      	movs	r1, #15
 800065c:	187b      	adds	r3, r7, r1
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	225a      	movs	r2, #90	; 0x5a
 8000662:	4353      	muls	r3, r2
 8000664:	332d      	adds	r3, #45	; 0x2d
 8000666:	33ff      	adds	r3, #255	; 0xff
 8000668:	001a      	movs	r2, r3
 800066a:	4b48      	ldr	r3, [pc, #288]	; (800078c <encode_joystick+0x238>)
 800066c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR4 = 200 + 90*button_state;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	225a      	movs	r2, #90	; 0x5a
 8000674:	4353      	muls	r3, r2
 8000676:	33c8      	adds	r3, #200	; 0xc8
 8000678:	001a      	movs	r2, r3
 800067a:	4b44      	ldr	r3, [pc, #272]	; (800078c <encode_joystick+0x238>)
 800067c:	641a      	str	r2, [r3, #64]	; 0x40
 800067e:	e080      	b.n	8000782 <encode_joystick+0x22e>
	}
	//вперед-налево
	else if(left_joystick_left_right == 1 && right_joystick_top_bottom == 1)
 8000680:	1d7b      	adds	r3, r7, #5
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d116      	bne.n	80006b6 <encode_joystick+0x162>
 8000688:	1dfb      	adds	r3, r7, #7
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d112      	bne.n	80006b6 <encode_joystick+0x162>
	{
		TIM1->CCR1 = 200 + 90*button_state;
 8000690:	210f      	movs	r1, #15
 8000692:	187b      	adds	r3, r7, r1
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	225a      	movs	r2, #90	; 0x5a
 8000698:	4353      	muls	r3, r2
 800069a:	33c8      	adds	r3, #200	; 0xc8
 800069c:	001a      	movs	r2, r3
 800069e:	4b3b      	ldr	r3, [pc, #236]	; (800078c <encode_joystick+0x238>)
 80006a0:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR4 = 300 + 90*button_state;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	225a      	movs	r2, #90	; 0x5a
 80006a8:	4353      	muls	r3, r2
 80006aa:	332d      	adds	r3, #45	; 0x2d
 80006ac:	33ff      	adds	r3, #255	; 0xff
 80006ae:	001a      	movs	r2, r3
 80006b0:	4b36      	ldr	r3, [pc, #216]	; (800078c <encode_joystick+0x238>)
 80006b2:	641a      	str	r2, [r3, #64]	; 0x40
 80006b4:	e065      	b.n	8000782 <encode_joystick+0x22e>
	}
	//назад-направо
	else if(left_joystick_left_right == 2 && right_joystick_top_bottom == 2)
 80006b6:	1d7b      	adds	r3, r7, #5
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d116      	bne.n	80006ec <encode_joystick+0x198>
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b02      	cmp	r3, #2
 80006c4:	d112      	bne.n	80006ec <encode_joystick+0x198>
	{
		TIM1->CCR2 = 300 + 90*button_state;
 80006c6:	210f      	movs	r1, #15
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	225a      	movs	r2, #90	; 0x5a
 80006ce:	4353      	muls	r3, r2
 80006d0:	332d      	adds	r3, #45	; 0x2d
 80006d2:	33ff      	adds	r3, #255	; 0xff
 80006d4:	001a      	movs	r2, r3
 80006d6:	4b2d      	ldr	r3, [pc, #180]	; (800078c <encode_joystick+0x238>)
 80006d8:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 200 + 90*button_state;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	225a      	movs	r2, #90	; 0x5a
 80006e0:	4353      	muls	r3, r2
 80006e2:	33c8      	adds	r3, #200	; 0xc8
 80006e4:	001a      	movs	r2, r3
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <encode_joystick+0x238>)
 80006e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80006ea:	e04a      	b.n	8000782 <encode_joystick+0x22e>
	}
	//назад-налево
	else if(left_joystick_left_right == 1 && right_joystick_top_bottom == 2)
 80006ec:	1d7b      	adds	r3, r7, #5
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d116      	bne.n	8000722 <encode_joystick+0x1ce>
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d112      	bne.n	8000722 <encode_joystick+0x1ce>
	{
		TIM1->CCR2 = 200 + 90*button_state;
 80006fc:	210f      	movs	r1, #15
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	225a      	movs	r2, #90	; 0x5a
 8000704:	4353      	muls	r3, r2
 8000706:	33c8      	adds	r3, #200	; 0xc8
 8000708:	001a      	movs	r2, r3
 800070a:	4b20      	ldr	r3, [pc, #128]	; (800078c <encode_joystick+0x238>)
 800070c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 300 + 90*button_state;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	225a      	movs	r2, #90	; 0x5a
 8000714:	4353      	muls	r3, r2
 8000716:	332d      	adds	r3, #45	; 0x2d
 8000718:	33ff      	adds	r3, #255	; 0xff
 800071a:	001a      	movs	r2, r3
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <encode_joystick+0x238>)
 800071e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000720:	e02f      	b.n	8000782 <encode_joystick+0x22e>
	}
	//направо
	else if(left_joystick_left_right == 2)
 8000722:	1d7b      	adds	r3, r7, #5
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b02      	cmp	r3, #2
 8000728:	d113      	bne.n	8000752 <encode_joystick+0x1fe>
	{
		TIM1->CCR1 = 300 + 90*button_state;
 800072a:	210f      	movs	r1, #15
 800072c:	187b      	adds	r3, r7, r1
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	225a      	movs	r2, #90	; 0x5a
 8000732:	4353      	muls	r3, r2
 8000734:	332d      	adds	r3, #45	; 0x2d
 8000736:	33ff      	adds	r3, #255	; 0xff
 8000738:	001a      	movs	r2, r3
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <encode_joystick+0x238>)
 800073c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR3 = 300 + 90*button_state;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	225a      	movs	r2, #90	; 0x5a
 8000744:	4353      	muls	r3, r2
 8000746:	332d      	adds	r3, #45	; 0x2d
 8000748:	33ff      	adds	r3, #255	; 0xff
 800074a:	001a      	movs	r2, r3
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <encode_joystick+0x238>)
 800074e:	63da      	str	r2, [r3, #60]	; 0x3c
	{
		TIM1->CCR2 = 300 + 90*button_state;
		TIM1->CCR4 = 300 + 90*button_state;
	}

}
 8000750:	e017      	b.n	8000782 <encode_joystick+0x22e>
	else if(left_joystick_left_right == 1)
 8000752:	1d7b      	adds	r3, r7, #5
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d113      	bne.n	8000782 <encode_joystick+0x22e>
		TIM1->CCR2 = 300 + 90*button_state;
 800075a:	210f      	movs	r1, #15
 800075c:	187b      	adds	r3, r7, r1
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	225a      	movs	r2, #90	; 0x5a
 8000762:	4353      	muls	r3, r2
 8000764:	332d      	adds	r3, #45	; 0x2d
 8000766:	33ff      	adds	r3, #255	; 0xff
 8000768:	001a      	movs	r2, r3
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <encode_joystick+0x238>)
 800076c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR4 = 300 + 90*button_state;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	225a      	movs	r2, #90	; 0x5a
 8000774:	4353      	muls	r3, r2
 8000776:	332d      	adds	r3, #45	; 0x2d
 8000778:	33ff      	adds	r3, #255	; 0xff
 800077a:	001a      	movs	r2, r3
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <encode_joystick+0x238>)
 800077e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000780:	e7ff      	b.n	8000782 <encode_joystick+0x22e>
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	b004      	add	sp, #16
 8000788:	bdb0      	pop	{r4, r5, r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	40012c00 	.word	0x40012c00

08000790 <reset_joystick>:

void reset_joystick(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <reset_joystick+0x24>)
 8000796:	2200      	movs	r2, #0
 8000798:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <reset_joystick+0x24>)
 800079c:	2200      	movs	r2, #0
 800079e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <reset_joystick+0x24>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 0;
 80007a6:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <reset_joystick+0x24>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	40012c00 	.word	0x40012c00

080007b8 <reset_buttons>:

void reset_buttons(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	GPIOD->ODR &= ~(GPIO_ODR_OD1 | GPIO_ODR_OD2);
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <reset_buttons+0x18>)
 80007be:	695a      	ldr	r2, [r3, #20]
 80007c0:	4b03      	ldr	r3, [pc, #12]	; (80007d0 <reset_buttons+0x18>)
 80007c2:	2106      	movs	r1, #6
 80007c4:	438a      	bics	r2, r1
 80007c6:	615a      	str	r2, [r3, #20]
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	50000c00 	.word	0x50000c00

080007d4 <nrf24_basic_init>:

	@return mistake code or 0 if no mistakes were found
*/
// ************************************************ //
uint32_t nrf24_basic_init(nrf24l01p *nrf24_instance)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	// Check if the particular device was initialized properly
	uint32_t declaration_mistake_code = nrf24_check_declarations(nrf24_instance);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 f8e2 	bl	80009a8 <nrf24_check_declarations>
 80007e4:	0003      	movs	r3, r0
 80007e6:	60bb      	str	r3, [r7, #8]
	if ( declaration_mistake_code )
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <nrf24_basic_init+0x1e>
	{
		// Function is immediately stopped
		return declaration_mistake_code;
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	e0b8      	b.n	8000964 <nrf24_basic_init+0x190>
	}

	// Check if the particular device is at least in power-down mode. It takes 100ms for the device to load into the power-down from the power on.
	// So if the function is called immediately device could not be ready yet
	uint32_t checks = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
	while ( nrf24_check_if_alive(nrf24_instance) )
 80007f6:	e012      	b.n	800081e <nrf24_basic_init+0x4a>
	{
		// Small dummy delay. Efficiency will depend on MCU clock speed
		for (uint32_t dummy_delay = 0; dummy_delay < 1000; dummy_delay++){}
 80007f8:	2300      	movs	r3, #0
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	e002      	b.n	8000804 <nrf24_basic_init+0x30>
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	3301      	adds	r3, #1
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693a      	ldr	r2, [r7, #16]
 8000806:	23fa      	movs	r3, #250	; 0xfa
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	429a      	cmp	r2, r3
 800080c:	d3f7      	bcc.n	80007fe <nrf24_basic_init+0x2a>

		checks += 1;
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	3301      	adds	r3, #1
 8000812:	617b      	str	r3, [r7, #20]

		// If after 10 checks device is still not responding return mistake code
		if ( checks == 10 )
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	2b0a      	cmp	r3, #10
 8000818:	d101      	bne.n	800081e <nrf24_basic_init+0x4a>
		{
			return NRF24_DEVICE_IS_NOT_CONNECTED;
 800081a:	2303      	movs	r3, #3
 800081c:	e0a2      	b.n	8000964 <nrf24_basic_init+0x190>
	while ( nrf24_check_if_alive(nrf24_instance) )
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	0018      	movs	r0, r3
 8000822:	f000 f8a3 	bl	800096c <nrf24_check_if_alive>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d1e6      	bne.n	80007f8 <nrf24_basic_init+0x24>
		}
	}

	// To start SPI transmission high to low front should be detected. So we should prepare lone setting it high
	nrf24_instance->csn_high();
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4798      	blx	r3

	// Go to standby-1 mode in case init is called to re-setup device
	nrf24_instance->ce_low();
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	4798      	blx	r3

	// This function will return mistake code if mistake occurs. If more then one mistake occurs only code of the last one will be returned
	uint32_t mistake_code = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]

	// Default config setup - disable all interrupts, enable CRC with 1 byte encoding, TX mode with NO power up
	nrf24_instance->csn_low();
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	4798      	blx	r3
	nrf24_instance->spi_write_byte(NRF24_W_REGISTER | NRF24_CONFIG);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	2020      	movs	r0, #32
 8000846:	4798      	blx	r3
	nrf24_instance->spi_write_byte(NRF24_INTERRUPTS_MASK | NRF24_EN_CRC | NRF24_CRCO);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	691b      	ldr	r3, [r3, #16]
 800084c:	207c      	movs	r0, #124	; 0x7c
 800084e:	4798      	blx	r3
	nrf24_instance->csn_high();
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4798      	blx	r3

	// Checking frequency channel. Change to valid value if wrong and throw mistake. Then write value to NRF
	if ( nrf24_instance->frequency_channel < 1 )
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d105      	bne.n	800086a <nrf24_basic_init+0x96>
	{
		nrf24_instance->frequency_channel = 1;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2201      	movs	r2, #1
 8000862:	619a      	str	r2, [r3, #24]
		mistake_code = NRF24_WRONG_CHANNEL_FREQUENCY;
 8000864:	2301      	movs	r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	e008      	b.n	800087c <nrf24_basic_init+0xa8>
	}
	else if ( nrf24_instance->frequency_channel > 124 )
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	2b7c      	cmp	r3, #124	; 0x7c
 8000870:	d904      	bls.n	800087c <nrf24_basic_init+0xa8>
	{
		nrf24_instance->frequency_channel = 124;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	227c      	movs	r2, #124	; 0x7c
 8000876:	619a      	str	r2, [r3, #24]
		mistake_code = NRF24_WRONG_CHANNEL_FREQUENCY;
 8000878:	2301      	movs	r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
	}
	nrf24_instance->csn_low();
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	4798      	blx	r3
	nrf24_instance->spi_write_byte(NRF24_W_REGISTER | NRF24_RF_CH);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	691b      	ldr	r3, [r3, #16]
 8000886:	2025      	movs	r0, #37	; 0x25
 8000888:	4798      	blx	r3
	nrf24_instance->spi_write_byte(nrf24_instance->frequency_channel);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	691a      	ldr	r2, [r3, #16]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	0018      	movs	r0, r3
 8000896:	4790      	blx	r2
	nrf24_instance->csn_high();
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4798      	blx	r3

	// Set up device data rate and power output
	nrf24_instance->csn_low();
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	4798      	blx	r3
	nrf24_instance->spi_write_byte(NRF24_W_REGISTER | NRF24_RF_SETUP);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	691b      	ldr	r3, [r3, #16]
 80008a8:	2026      	movs	r0, #38	; 0x26
 80008aa:	4798      	blx	r3
	nrf24_instance->spi_write_byte(nrf24_instance->data_rate | nrf24_instance->power_output);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	691b      	ldr	r3, [r3, #16]
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	7f51      	ldrb	r1, [r2, #29]
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	7f12      	ldrb	r2, [r2, #28]
 80008b8:	430a      	orrs	r2, r1
 80008ba:	b2d2      	uxtb	r2, r2
 80008bc:	0010      	movs	r0, r2
 80008be:	4798      	blx	r3
	nrf24_instance->csn_high();
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4798      	blx	r3

	// Reset all interrupt flags in case setup is called more than one time to dynamically change parameters of nrf24l01+ instance
	nrf24_instance->csn_low();
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	4798      	blx	r3
	nrf24_instance->spi_write_byte(NRF24_W_REGISTER | NRF24_STATUS);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	691b      	ldr	r3, [r3, #16]
 80008d0:	2027      	movs	r0, #39	; 0x27
 80008d2:	4798      	blx	r3
	nrf24_instance->spi_write_byte(NRF24_INTERRUPTS_MASK);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	691b      	ldr	r3, [r3, #16]
 80008d8:	2070      	movs	r0, #112	; 0x70
 80008da:	4798      	blx	r3
	nrf24_instance->csn_high();
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4798      	blx	r3

	// If data rate is 250kbps, set retransmission delay to 750us (datasheet recommended is 500us at 250kbps) and retransmission count to 2
	if (nrf24_instance->data_rate == nrf24_250_kbps)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	7f5b      	ldrb	r3, [r3, #29]
 80008e6:	2b20      	cmp	r3, #32
 80008e8:	d10d      	bne.n	8000906 <nrf24_basic_init+0x132>
	{
		nrf24_instance->csn_low();
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	4798      	blx	r3
		nrf24_instance->spi_write_byte(NRF24_W_REGISTER | NRF24_SETUP_RETR);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	691b      	ldr	r3, [r3, #16]
 80008f4:	2024      	movs	r0, #36	; 0x24
 80008f6:	4798      	blx	r3
		nrf24_instance->spi_write_byte(0x2 | nrf24_wait_750_us);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	691b      	ldr	r3, [r3, #16]
 80008fc:	2022      	movs	r0, #34	; 0x22
 80008fe:	4798      	blx	r3
		nrf24_instance->csn_high();
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4798      	blx	r3
	if ( nrf24_instance->payload_size_in_bytes < 0 )
	{
		nrf24_instance->payload_size_in_bytes = 0;
		mistake_code = NRF24_WRONG_PAYLOAD_SIZE;
	}
	else if ( nrf24_instance->payload_size_in_bytes > 32 )
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	2b20      	cmp	r3, #32
 800090c:	d904      	bls.n	8000918 <nrf24_basic_init+0x144>
	{
		nrf24_instance->payload_size_in_bytes = 32;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2220      	movs	r2, #32
 8000912:	615a      	str	r2, [r3, #20]
		mistake_code = NRF24_WRONG_PAYLOAD_SIZE;
 8000914:	2302      	movs	r3, #2
 8000916:	60fb      	str	r3, [r7, #12]
	}
	nrf24_instance->csn_low();
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	4798      	blx	r3
	nrf24_instance->spi_write_byte(NRF24_W_REGISTER | NRF24_RX_PW_P0);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	691b      	ldr	r3, [r3, #16]
 8000922:	2031      	movs	r0, #49	; 0x31
 8000924:	4798      	blx	r3
	nrf24_instance->spi_write_byte(nrf24_instance->payload_size_in_bytes);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	691a      	ldr	r2, [r3, #16]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	0018      	movs	r0, r3
 8000932:	4790      	blx	r2
	nrf24_instance->csn_high();
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4798      	blx	r3

	// Write same payload size for pipe 1
	nrf24_instance->csn_low();
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	4798      	blx	r3
	nrf24_instance->spi_write_byte(NRF24_W_REGISTER | NRF24_RX_PW_P1);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	691b      	ldr	r3, [r3, #16]
 8000944:	2032      	movs	r0, #50	; 0x32
 8000946:	4798      	blx	r3
	nrf24_instance->spi_write_byte(nrf24_instance->payload_size_in_bytes);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	691a      	ldr	r2, [r3, #16]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	0018      	movs	r0, r3
 8000954:	4790      	blx	r2
	nrf24_instance->csn_high();
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4798      	blx	r3

	// Device was initialized
	nrf24_instance->device_was_initialized = 1;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2201      	movs	r2, #1
 8000960:	621a      	str	r2, [r3, #32]

	return mistake_code;
 8000962:	68fb      	ldr	r3, [r7, #12]
}
 8000964:	0018      	movs	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	b006      	add	sp, #24
 800096a:	bd80      	pop	{r7, pc}

0800096c <nrf24_check_if_alive>:

	@return mistake code or 0 if no mistakes were found.
*/
// ************************************************ //
uint32_t nrf24_check_if_alive(nrf24l01p *nrf24_instance)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	nrf24_instance->csn_low();
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	4798      	blx	r3

	nrf24_instance->spi_write_byte(NRF24_RF_CH);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	691b      	ldr	r3, [r3, #16]
 800097e:	2005      	movs	r0, #5
 8000980:	4798      	blx	r3

	if ( nrf24_instance->spi_write_byte(NRF24_NOP) )
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	691b      	ldr	r3, [r3, #16]
 8000986:	20ff      	movs	r0, #255	; 0xff
 8000988:	4798      	blx	r3
 800098a:	1e03      	subs	r3, r0, #0
 800098c:	d004      	beq.n	8000998 <nrf24_check_if_alive+0x2c>
	{
		nrf24_instance->csn_high();
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4798      	blx	r3
		return 0;
 8000994:	2300      	movs	r3, #0
 8000996:	e003      	b.n	80009a0 <nrf24_check_if_alive+0x34>
	}

	nrf24_instance->csn_high();
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4798      	blx	r3
	return NRF24_DEVICE_IS_NOT_CONNECTED;
 800099e:	2303      	movs	r3, #3
}
 80009a0:	0018      	movs	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b002      	add	sp, #8
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <nrf24_check_declarations>:

	@return first found mistake code or 0 if no mistakes were found
 */
// ************************************************ //
uint32_t nrf24_check_declarations(nrf24l01p *nrf24_instance)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	if ( nrf24_instance->ce_high == 0 )
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d101      	bne.n	80009bc <nrf24_check_declarations+0x14>
	{
		return NRF24_CE_HIGH_FUNCTION_IS_MISSING;
 80009b8:	2304      	movs	r3, #4
 80009ba:	e018      	b.n	80009ee <nrf24_check_declarations+0x46>
	}

	if ( nrf24_instance->ce_low == 0 )
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d101      	bne.n	80009c8 <nrf24_check_declarations+0x20>
	{
		return NRF24_CE_LOW_FUNCTION_IS_MISSING;
 80009c4:	2305      	movs	r3, #5
 80009c6:	e012      	b.n	80009ee <nrf24_check_declarations+0x46>
	}

	if ( nrf24_instance->csn_high == 0 )
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d101      	bne.n	80009d4 <nrf24_check_declarations+0x2c>
	{
		return NRF24_CSN_HIGH_FUNCTION_IS_MISSING;
 80009d0:	2306      	movs	r3, #6
 80009d2:	e00c      	b.n	80009ee <nrf24_check_declarations+0x46>
	}

	if ( nrf24_instance->csn_low == 0 )
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d101      	bne.n	80009e0 <nrf24_check_declarations+0x38>
	{
		return NRF24_CSN_LOW_FUNCTION_IS_MISSING;
 80009dc:	2307      	movs	r3, #7
 80009de:	e006      	b.n	80009ee <nrf24_check_declarations+0x46>
	}

	if ( nrf24_instance->spi_write_byte == 0 )
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	691b      	ldr	r3, [r3, #16]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d101      	bne.n	80009ec <nrf24_check_declarations+0x44>
	{
		return NRF24_SPI_WRITE_FUNCTION_IS_MISSING;
 80009e8:	2308      	movs	r3, #8
 80009ea:	e000      	b.n	80009ee <nrf24_check_declarations+0x46>
	}

	return 0;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	0018      	movs	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b002      	add	sp, #8
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <nrf24_rx_mode>:

	@return first found mistake code or 0 if no mistakes were found
 */
// ************************************************ //
uint32_t nrf24_rx_mode(nrf24l01p *nrf24_instance)
{
 80009f6:	b5b0      	push	{r4, r5, r7, lr}
 80009f8:	b084      	sub	sp, #16
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
	// Check if device was initialized
	if ( nrf24_instance->device_was_initialized == 0 )
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6a1b      	ldr	r3, [r3, #32]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d101      	bne.n	8000a0a <nrf24_rx_mode+0x14>
	{
		return NRF24_INSTANCE_WAS_NOT_INITIALIZED;
 8000a06:	2309      	movs	r3, #9
 8000a08:	e04a      	b.n	8000aa0 <nrf24_rx_mode+0xaa>
	}

	// Go to standby-1 mode
	nrf24_instance->ce_low();
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	4798      	blx	r3

	// Read current config state
	nrf24_instance->csn_low();
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	4798      	blx	r3
	nrf24_instance->spi_write_byte(NRF24_R_REGISTER | NRF24_CONFIG);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	691b      	ldr	r3, [r3, #16]
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	4798      	blx	r3
	uint8_t current_register_state = nrf24_instance->spi_write_byte(NRF24_NOP);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	250f      	movs	r5, #15
 8000a24:	197c      	adds	r4, r7, r5
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	4798      	blx	r3
 8000a2a:	0003      	movs	r3, r0
 8000a2c:	7023      	strb	r3, [r4, #0]
	nrf24_instance->csn_high();
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4798      	blx	r3

	// Add power up to current config
	current_register_state |= NRF24_PRIM_RX;
 8000a34:	002c      	movs	r4, r5
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	193a      	adds	r2, r7, r4
 8000a3a:	7812      	ldrb	r2, [r2, #0]
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	701a      	strb	r2, [r3, #0]

	// Write new config state with power up
	nrf24_instance->csn_low();
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	4798      	blx	r3
	nrf24_instance->spi_write_byte(NRF24_W_REGISTER | NRF24_CONFIG);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	691b      	ldr	r3, [r3, #16]
 8000a4c:	2020      	movs	r0, #32
 8000a4e:	4798      	blx	r3
	nrf24_instance->spi_write_byte(current_register_state | NRF24_PWR_UP);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	691b      	ldr	r3, [r3, #16]
 8000a54:	193a      	adds	r2, r7, r4
 8000a56:	7812      	ldrb	r2, [r2, #0]
 8000a58:	2102      	movs	r1, #2
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	b2d2      	uxtb	r2, r2
 8000a5e:	0010      	movs	r0, r2
 8000a60:	4798      	blx	r3
	nrf24_instance->csn_high();
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4798      	blx	r3

	// Clear RX FIFO if it was not empty
	nrf24_instance->csn_low();
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	4798      	blx	r3
	nrf24_instance->spi_write_byte(NRF24_FLUSH_RX);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	691b      	ldr	r3, [r3, #16]
 8000a72:	20e2      	movs	r0, #226	; 0xe2
 8000a74:	4798      	blx	r3
	nrf24_instance->csn_high();
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4798      	blx	r3

	// Reset all interrupt flags
	nrf24_instance->csn_low();
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	4798      	blx	r3
	nrf24_instance->spi_write_byte(NRF24_W_REGISTER | NRF24_STATUS);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	691b      	ldr	r3, [r3, #16]
 8000a86:	2027      	movs	r0, #39	; 0x27
 8000a88:	4798      	blx	r3
	nrf24_instance->spi_write_byte(NRF24_INTERRUPTS_MASK);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	691b      	ldr	r3, [r3, #16]
 8000a8e:	2070      	movs	r0, #112	; 0x70
 8000a90:	4798      	blx	r3
	nrf24_instance->csn_high();
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4798      	blx	r3

	// NRF should always be in RX mode not to miss data
	nrf24_instance->ce_high();
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	4798      	blx	r3

	return 0;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b004      	add	sp, #16
 8000aa6:	bdb0      	pop	{r4, r5, r7, pc}

08000aa8 <nrf24_enable_pipe1>:
	@return first found mistake code or 0 if no mistakes were found
 */
// ************************************************ //

uint32_t nrf24_enable_pipe1(nrf24l01p *nrf24_instance, uint8_t pipe_address[])
{
 8000aa8:	b5b0      	push	{r4, r5, r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
	if ( nrf24_instance->device_was_initialized == 0 )
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6a1b      	ldr	r3, [r3, #32]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d101      	bne.n	8000abe <nrf24_enable_pipe1+0x16>
	{
		return NRF24_INSTANCE_WAS_NOT_INITIALIZED;
 8000aba:	2309      	movs	r3, #9
 8000abc:	e049      	b.n	8000b52 <nrf24_enable_pipe1+0xaa>
	}

	// Stop RX mode if was on
	nrf24_instance->ce_low();
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	4798      	blx	r3

	// Write new pipe 1 address
	nrf24_instance->csn_low();
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	4798      	blx	r3
	nrf24_instance->spi_write_byte(NRF24_W_REGISTER | NRF24_RX_ADDR_P1);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	691b      	ldr	r3, [r3, #16]
 8000ace:	202b      	movs	r0, #43	; 0x2b
 8000ad0:	4798      	blx	r3
	for(uint32_t i = 0; i < 5; ++i)
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	e00c      	b.n	8000af2 <nrf24_enable_pipe1+0x4a>
	{
		nrf24_instance->spi_write_byte(pipe_address[4-i]);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	691b      	ldr	r3, [r3, #16]
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	2104      	movs	r1, #4
 8000ae0:	1a8a      	subs	r2, r1, r2
 8000ae2:	6839      	ldr	r1, [r7, #0]
 8000ae4:	188a      	adds	r2, r1, r2
 8000ae6:	7812      	ldrb	r2, [r2, #0]
 8000ae8:	0010      	movs	r0, r2
 8000aea:	4798      	blx	r3
	for(uint32_t i = 0; i < 5; ++i)
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3301      	adds	r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	2b04      	cmp	r3, #4
 8000af6:	d9ef      	bls.n	8000ad8 <nrf24_enable_pipe1+0x30>
	}
	nrf24_instance->csn_high();
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4798      	blx	r3

	nrf24_instance->csn_low();
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	4798      	blx	r3
	nrf24_instance->spi_write_byte(NRF24_R_REGISTER | NRF24_EN_RXADDR);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	691b      	ldr	r3, [r3, #16]
 8000b08:	2002      	movs	r0, #2
 8000b0a:	4798      	blx	r3
	uint8_t register_state = nrf24_instance->spi_write_byte(NRF24_NOP);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	691b      	ldr	r3, [r3, #16]
 8000b10:	250b      	movs	r5, #11
 8000b12:	197c      	adds	r4, r7, r5
 8000b14:	20ff      	movs	r0, #255	; 0xff
 8000b16:	4798      	blx	r3
 8000b18:	0003      	movs	r3, r0
 8000b1a:	7023      	strb	r3, [r4, #0]
	nrf24_instance->csn_high();
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4798      	blx	r3

	register_state |= 0x02;
 8000b22:	002c      	movs	r4, r5
 8000b24:	193b      	adds	r3, r7, r4
 8000b26:	193a      	adds	r2, r7, r4
 8000b28:	7812      	ldrb	r2, [r2, #0]
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	701a      	strb	r2, [r3, #0]

	nrf24_instance->csn_low();
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	4798      	blx	r3
	nrf24_instance->spi_write_byte(NRF24_W_REGISTER | NRF24_EN_RXADDR);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	2022      	movs	r0, #34	; 0x22
 8000b3c:	4798      	blx	r3
	nrf24_instance->spi_write_byte(register_state);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	193a      	adds	r2, r7, r4
 8000b44:	7812      	ldrb	r2, [r2, #0]
 8000b46:	0010      	movs	r0, r2
 8000b48:	4798      	blx	r3
	nrf24_instance->csn_high();
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4798      	blx	r3

	return 0;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	0018      	movs	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b004      	add	sp, #16
 8000b58:	bdb0      	pop	{r4, r5, r7, pc}

08000b5a <nrf24_is_new_data_availiable>:

	@return number of the pipe which received message or 0 if no message was received.
 */
// ************************************************ //
uint8_t nrf24_is_new_data_availiable(nrf24l01p *nrf24_instance)
{
 8000b5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
	// IF device is not initialized will return no data
	if ( nrf24_instance->device_was_initialized == 0 )
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a1b      	ldr	r3, [r3, #32]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d101      	bne.n	8000b6e <nrf24_is_new_data_availiable+0x14>
	{
		return 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e023      	b.n	8000bb6 <nrf24_is_new_data_availiable+0x5c>
	}

	nrf24_instance->csn_low();
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	4798      	blx	r3
	uint8_t current_device_status = nrf24_instance->spi_write_byte(NRF24_R_REGISTER | NRF24_FIFO_STATUS);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	250f      	movs	r5, #15
 8000b7a:	197c      	adds	r4, r7, r5
 8000b7c:	2017      	movs	r0, #23
 8000b7e:	4798      	blx	r3
 8000b80:	0003      	movs	r3, r0
 8000b82:	7023      	strb	r3, [r4, #0]
	uint8_t current_fifo_status = nrf24_instance->spi_write_byte(NRF24_NOP);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	260e      	movs	r6, #14
 8000b8a:	19bc      	adds	r4, r7, r6
 8000b8c:	20ff      	movs	r0, #255	; 0xff
 8000b8e:	4798      	blx	r3
 8000b90:	0003      	movs	r3, r0
 8000b92:	7023      	strb	r3, [r4, #0]
	nrf24_instance->csn_high();
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4798      	blx	r3

	if((current_fifo_status & 0x01) == 0)
 8000b9a:	19bb      	adds	r3, r7, r6
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	d107      	bne.n	8000bb4 <nrf24_is_new_data_availiable+0x5a>
	{

		return (current_device_status &0x0E) >> 1;
 8000ba4:	197b      	adds	r3, r7, r5
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	105b      	asrs	r3, r3, #1
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2207      	movs	r2, #7
 8000bae:	4013      	ands	r3, r2
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	e000      	b.n	8000bb6 <nrf24_is_new_data_availiable+0x5c>
	}

	return 0;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b005      	add	sp, #20
 8000bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000bbe <nrf24_read_message>:

	@return number of the pipe which received message or 0 if no message was received.
 */
// ************************************************ //
uint32_t nrf24_read_message(nrf24l01p *nrf24_instance, void *payload_storage, uint32_t payload_size_in_bytes)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b08a      	sub	sp, #40	; 0x28
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
	if ( nrf24_instance->device_was_initialized == 0 )
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	6a1b      	ldr	r3, [r3, #32]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <nrf24_read_message+0x18>
	{
		return NRF24_INSTANCE_WAS_NOT_INITIALIZED;
 8000bd2:	2309      	movs	r3, #9
 8000bd4:	e053      	b.n	8000c7e <nrf24_read_message+0xc0>
	}

	uint8_t mistake_code = 0;
 8000bd6:	2127      	movs	r1, #39	; 0x27
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]

	uint8_t *current_byte_to_be_read = payload_storage;
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	623b      	str	r3, [r7, #32]

	// Check for proper payload size
	if(payload_size_in_bytes > nrf24_instance->payload_size_in_bytes)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d905      	bls.n	8000bf8 <nrf24_read_message+0x3a>
	{
		payload_size_in_bytes = nrf24_instance->payload_size_in_bytes;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	607b      	str	r3, [r7, #4]
		mistake_code = NRF24_WRONG_PAYLOAD_SIZE;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	701a      	strb	r2, [r3, #0]
	{
		return NRF24_WRONG_PAYLOAD_SIZE;
	}

	// Read data stored in RX FIFO
	nrf24_instance->csn_low();
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	4798      	blx	r3
	nrf24_instance->spi_write_byte(NRF24_R_RX_PAYLOAD);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	2061      	movs	r0, #97	; 0x61
 8000c04:	4798      	blx	r3
	for (uint32_t i = 0; i < payload_size_in_bytes; ++i)
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
 8000c0a:	e00d      	b.n	8000c28 <nrf24_read_message+0x6a>
	{
		*current_byte_to_be_read = nrf24_instance->spi_write_byte(NRF24_NOP);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	20ff      	movs	r0, #255	; 0xff
 8000c12:	4798      	blx	r3
 8000c14:	0003      	movs	r3, r0
 8000c16:	001a      	movs	r2, r3
 8000c18:	6a3b      	ldr	r3, [r7, #32]
 8000c1a:	701a      	strb	r2, [r3, #0]
		current_byte_to_be_read++;
 8000c1c:	6a3b      	ldr	r3, [r7, #32]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	623b      	str	r3, [r7, #32]
	for (uint32_t i = 0; i < payload_size_in_bytes; ++i)
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3301      	adds	r3, #1
 8000c26:	61fb      	str	r3, [r7, #28]
 8000c28:	69fa      	ldr	r2, [r7, #28]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d3ed      	bcc.n	8000c0c <nrf24_read_message+0x4e>
	}

	uint32_t zeros_to_be_read = nrf24_instance->payload_size_in_bytes - payload_size_in_bytes;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	695a      	ldr	r2, [r3, #20]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	617b      	str	r3, [r7, #20]
	for(uint32_t i = 0; i < zeros_to_be_read; ++i)
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
 8000c3e:	e006      	b.n	8000c4e <nrf24_read_message+0x90>
	{
		nrf24_instance->spi_write_byte(NRF24_NOP);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	20ff      	movs	r0, #255	; 0xff
 8000c46:	4798      	blx	r3
	for(uint32_t i = 0; i < zeros_to_be_read; ++i)
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	61bb      	str	r3, [r7, #24]
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d3f4      	bcc.n	8000c40 <nrf24_read_message+0x82>
	}
	nrf24_instance->csn_high();
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4798      	blx	r3

	// Clear new RX data interrupt flag
	nrf24_instance->csn_low();
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	4798      	blx	r3
	nrf24_instance->spi_write_byte(NRF24_W_REGISTER | NRF24_STATUS);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	2027      	movs	r0, #39	; 0x27
 8000c68:	4798      	blx	r3
	nrf24_instance->spi_write_byte(NRF24_MASK_RX_DR);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	2040      	movs	r0, #64	; 0x40
 8000c70:	4798      	blx	r3
	nrf24_instance->csn_high();
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4798      	blx	r3

	return mistake_code;
 8000c78:	2327      	movs	r3, #39	; 0x27
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	781b      	ldrb	r3, [r3, #0]
}
 8000c7e:	0018      	movs	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b00a      	add	sp, #40	; 0x28
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <main>:
uint8_t pip5_address = 0x99;
uint8_t radio_controller_message[6] = {0, 0, 0, 0, 0, 0};
uint16_t device_connection = 0;

int main(void)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af02      	add	r7, sp, #8
	device_init();
 8000c8e:	f7ff fa53 	bl	8000138 <device_init>

	GPIOD->ODR |= GPIO_ODR_OD3;
 8000c92:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <main+0x98>)
 8000c94:	695a      	ldr	r2, [r3, #20]
 8000c96:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <main+0x98>)
 8000c98:	2108      	movs	r1, #8
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	615a      	str	r2, [r3, #20]

	// This function should be called even if not pipe 1 is used to receive data because 4 first bytes of addresses of all pipes
	// are the same as pip1 and must set up through pipe1. Only last byte of every pipe rx address must be different.
	nrf24_enable_pipe1(&controller_nrf24, pipe1_rx_address);
 8000c9e:	4a21      	ldr	r2, [pc, #132]	; (8000d24 <main+0x9c>)
 8000ca0:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <main+0xa0>)
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff feff 	bl	8000aa8 <nrf24_enable_pipe1>

	// Must be called for any nrf24l01+ instance to enable rx mode.
	nrf24_rx_mode(&controller_nrf24);
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <main+0xa0>)
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff fea2 	bl	80009f6 <nrf24_rx_mode>

	while(1)
	{
		if(nrf24_is_new_data_availiable(&controller_nrf24))
 8000cb2:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <main+0xa0>)
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff ff50 	bl	8000b5a <nrf24_is_new_data_availiable>
 8000cba:	1e03      	subs	r3, r0, #0
 8000cbc:	d0f9      	beq.n	8000cb2 <main+0x2a>
		{
			nrf24_read_message(&controller_nrf24, radio_controller_message, sizeof(radio_controller_message));
 8000cbe:	491b      	ldr	r1, [pc, #108]	; (8000d2c <main+0xa4>)
 8000cc0:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <main+0xa0>)
 8000cc2:	2206      	movs	r2, #6
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff ff7a 	bl	8000bbe <nrf24_read_message>
			encode_buttons(radio_controller_message);
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <main+0xa4>)
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff fbfb 	bl	80004c8 <encode_buttons>
			encode_joystick((radio_controller_message[0] & 0x03),
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <main+0xa4>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	4013      	ands	r3, r2
 8000cda:	b2d8      	uxtb	r0, r3
							(radio_controller_message[0] & 0x0C) >> 2,
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <main+0xa4>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	109b      	asrs	r3, r3, #2
 8000ce2:	b2db      	uxtb	r3, r3
			encode_joystick((radio_controller_message[0] & 0x03),
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	b2d9      	uxtb	r1, r3
							(radio_controller_message[0] & 0x30) >> 4,
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <main+0xa4>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	111b      	asrs	r3, r3, #4
 8000cf0:	b2db      	uxtb	r3, r3
			encode_joystick((radio_controller_message[0] & 0x03),
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	b2da      	uxtb	r2, r3
							(radio_controller_message[0] & 0xC0) >> 6,
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <main+0xa4>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
			encode_joystick((radio_controller_message[0] & 0x03),
 8000cfc:	099b      	lsrs	r3, r3, #6
 8000cfe:	b2dc      	uxtb	r4, r3
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <main+0xa4>)
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	0023      	movs	r3, r4
 8000d06:	f7ff fc25 	bl	8000554 <encode_joystick>
							radio_controller_message);

			GPIOD->ODR |= GPIO_ODR_OD0;
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <main+0x98>)
 8000d0c:	695a      	ldr	r2, [r3, #20]
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <main+0x98>)
 8000d10:	2101      	movs	r1, #1
 8000d12:	430a      	orrs	r2, r1
 8000d14:	615a      	str	r2, [r3, #20]
			device_connection = 1;
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <main+0xa8>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	801a      	strh	r2, [r3, #0]
		if(nrf24_is_new_data_availiable(&controller_nrf24))
 8000d1c:	e7c9      	b.n	8000cb2 <main+0x2a>
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	50000c00 	.word	0x50000c00
 8000d24:	20000024 	.word	0x20000024
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	20000048 	.word	0x20000048
 8000d30:	2000004e 	.word	0x2000004e

08000d34 <TIM2_IRQHandler>:
	}

}

void TIM2_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0

	if(!device_connection)
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <TIM2_IRQHandler+0x3c>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d109      	bne.n	8000d54 <TIM2_IRQHandler+0x20>
	{
		reset_joystick();
 8000d40:	f7ff fd26 	bl	8000790 <reset_joystick>
		reset_buttons();
 8000d44:	f7ff fd38 	bl	80007b8 <reset_buttons>

		GPIOD->ODR &= ~GPIO_ODR_OD0;
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <TIM2_IRQHandler+0x40>)
 8000d4a:	695a      	ldr	r2, [r3, #20]
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <TIM2_IRQHandler+0x40>)
 8000d4e:	2101      	movs	r1, #1
 8000d50:	438a      	bics	r2, r1
 8000d52:	615a      	str	r2, [r3, #20]
	}

	device_connection = 0;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <TIM2_IRQHandler+0x3c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	801a      	strh	r2, [r3, #0]

	TIM2->SR &= ~TIM_SR_UIF;
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	05db      	lsls	r3, r3, #23
 8000d5e:	691a      	ldr	r2, [r3, #16]
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	05db      	lsls	r3, r3, #23
 8000d64:	2101      	movs	r1, #1
 8000d66:	438a      	bics	r2, r1
 8000d68:	611a      	str	r2, [r3, #16]
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	2000004e 	.word	0x2000004e
 8000d74:	50000c00 	.word	0x50000c00

08000d78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d78:	480d      	ldr	r0, [pc, #52]	; (8000db0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d7a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d7c:	e000      	b.n	8000d80 <Reset_Handler+0x8>
 8000d7e:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d82:	490d      	ldr	r1, [pc, #52]	; (8000db8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <LoopForever+0xe>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d98:	4c0a      	ldr	r4, [pc, #40]	; (8000dc4 <LoopForever+0x16>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000da6:	f000 f811 	bl	8000dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000daa:	f7ff ff6d 	bl	8000c88 <main>

08000dae <LoopForever>:

LoopForever:
    b LoopForever
 8000dae:	e7fe      	b.n	8000dae <LoopForever>
  ldr   r0, =_estack
 8000db0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000dbc:	08000e34 	.word	0x08000e34
  ldr r2, =_sbss
 8000dc0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000dc4:	20000050 	.word	0x20000050

08000dc8 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC_COMP_IRQHandler>
	...

08000dcc <__libc_init_array>:
 8000dcc:	b570      	push	{r4, r5, r6, lr}
 8000dce:	2600      	movs	r6, #0
 8000dd0:	4d0c      	ldr	r5, [pc, #48]	; (8000e04 <__libc_init_array+0x38>)
 8000dd2:	4c0d      	ldr	r4, [pc, #52]	; (8000e08 <__libc_init_array+0x3c>)
 8000dd4:	1b64      	subs	r4, r4, r5
 8000dd6:	10a4      	asrs	r4, r4, #2
 8000dd8:	42a6      	cmp	r6, r4
 8000dda:	d109      	bne.n	8000df0 <__libc_init_array+0x24>
 8000ddc:	2600      	movs	r6, #0
 8000dde:	f000 f819 	bl	8000e14 <_init>
 8000de2:	4d0a      	ldr	r5, [pc, #40]	; (8000e0c <__libc_init_array+0x40>)
 8000de4:	4c0a      	ldr	r4, [pc, #40]	; (8000e10 <__libc_init_array+0x44>)
 8000de6:	1b64      	subs	r4, r4, r5
 8000de8:	10a4      	asrs	r4, r4, #2
 8000dea:	42a6      	cmp	r6, r4
 8000dec:	d105      	bne.n	8000dfa <__libc_init_array+0x2e>
 8000dee:	bd70      	pop	{r4, r5, r6, pc}
 8000df0:	00b3      	lsls	r3, r6, #2
 8000df2:	58eb      	ldr	r3, [r5, r3]
 8000df4:	4798      	blx	r3
 8000df6:	3601      	adds	r6, #1
 8000df8:	e7ee      	b.n	8000dd8 <__libc_init_array+0xc>
 8000dfa:	00b3      	lsls	r3, r6, #2
 8000dfc:	58eb      	ldr	r3, [r5, r3]
 8000dfe:	4798      	blx	r3
 8000e00:	3601      	adds	r6, #1
 8000e02:	e7f2      	b.n	8000dea <__libc_init_array+0x1e>
 8000e04:	08000e2c 	.word	0x08000e2c
 8000e08:	08000e2c 	.word	0x08000e2c
 8000e0c:	08000e2c 	.word	0x08000e2c
 8000e10:	08000e30 	.word	0x08000e30

08000e14 <_init>:
 8000e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e1a:	bc08      	pop	{r3}
 8000e1c:	469e      	mov	lr, r3
 8000e1e:	4770      	bx	lr

08000e20 <_fini>:
 8000e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e26:	bc08      	pop	{r3}
 8000e28:	469e      	mov	lr, r3
 8000e2a:	4770      	bx	lr
